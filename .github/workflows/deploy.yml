name: CI/CD for Anamnesis FULL STACK

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: anamanesis
  APP_DIR_SNAILFRONT: /home/deployer-front/anamanesis
  HOST_PORT: 81

jobs:
  test:
    name: üõ°Ô∏è Lint and Test Code
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/staging')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install all monorepo dependencies
        # 'npm ci' est la m√©thode standard et la plus fiable pour la CI.
        # Il faut tout installer pour pouvoir lancer les v√©rifications sur l'ensemble du projet.
        run: npm ci

      - name: Run all checks (lint, types, etc.)
        # On lance le script "check:all" qui v√©rifie l'int√©gralit√© du projet,
        # ce qui est la bonne pratique pour l'int√©gration continue.
        run: npm run check:all

      - name: üõ°Ô∏è Security Audit
        # Fait √©chouer le workflow si des vuln√©rabilit√©s de niveau mod√©r√© ou sup√©rieur sont trouv√©es.
        # C'est une excellente pratique pour maintenir une base de code saine.
        run: npm audit --audit-level=moderate

  # --- JOB 2: Construit et pousse l'image Docker apr√®s un push sur 'staging' ---
  build:
    name: Build and Push Docker Image
    needs: test # Le build ne commence que si les tests ont r√©ussi
    if: (github.event_name == 'push' && github.ref == 'refs/heads/staging') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.ANAMNESIS_DEPLOY }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=true
            type=sha,prefix={{branch}}-,suffix=,format=short

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./client/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --- JOB 3: D√©ploie l'image sur la VM finale ---
  deploy:
    name: Deploy to SnailFront
    # La condition 'if' est inutile ici, car 'needs: build' garantit d√©j√† que ce job
    # ne s'ex√©cutera que si le build a r√©ussi, ce qui n'arrive que sur un push ou un workflow_dispatch.
    runs-on: ubuntu-latest
    needs: build
    environment: production

    permissions:
      packages: read

    steps:
      - name: Deploy to SnailFront via SnailWeb (Jump Host)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SNAILFRONT_PRIVATE_IP }}
          username: ${{ secrets.SNAILFRONT_DEPLOY_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY_SNAILFRONT }}
          port: 96

          proxy_host: ${{ secrets.SNAILWEB_HOST }}
          proxy_username: ${{ secrets.SNAILWEB_DEPLOY_USERNAME }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY_SNAILWEB }}
          proxy_port: 96

          script: |
            set -euxo pipefail

            echo "--- Starting deployment on SnailFront ---"

            # --- Variable Setup and Validation ---
            OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            # L'image exacte √† d√©ployer, avec le digest pour garantir l'immuabilit√©
            export IMAGE_TO_DEPLOY="${{ env.REGISTRY }}/${OWNER_LOWERCASE}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}"
            # Un nom de conteneur sp√©cifique pour ce d√©ploiement "patern"
            export CONTAINER_NAME="anamanesis-patern-frontend"
            export HOST_PORT="${{ env.HOST_PORT }}"

            echo "Deployment details:"
            echo "- Image: $IMAGE_TO_DEPLOY"
            echo "- Container: $CONTAINER_NAME"
            echo "- App Directory: ${{ env.APP_DIR_SNAILFRONT }}"
            echo "- Host Port: $HOST_PORT"

            # --- Docker Operations ---
            echo "Logging into ${{ env.REGISTRY }}..."
            # On utilise le secret d√©di√© au d√©ploiement pour s'authentifier sur le serveur distant
            echo "${{ secrets.ANAMNESIS_DEPLOY }}" | docker login ${{ env.REGISTRY }} -u "${{ github.actor }}" --password-stdin

            # --- Prepare Deployment Directory ---
            echo "Ensuring application directory exists..."
            mkdir -p ${{ env.APP_DIR_SNAILFRONT }}
            cd ${{ env.APP_DIR_SNAILFRONT }}

            # --- Create Configuration Files ---
            echo "Creating .env file for Docker Compose..."
            # Ce fichier ne contient que les variables dynamiques n√©cessaires pour le compose
            cat << EOF > .env
            # Auto-generated by GitHub Actions
            IMAGE_TO_DEPLOY=${IMAGE_TO_DEPLOY}
            CONTAINER_NAME=${CONTAINER_NAME}
            HOST_PORT=${HOST_PORT}
            EOF

            echo "Creating docker-compose.prod.yml..."
            # Ce fichier est la nouvelle configuration de d√©ploiement, simplifi√©e pour le front-end
            cat << 'EOF' > docker-compose.prod.yml
            services:
              frontend:
                image: ${IMAGE_TO_DEPLOY}
                container_name: ${CONTAINER_NAME}
                restart: unless-stopped
                ports:
                  - "${HOST_PORT}:80" # Mappe le port du serveur (d√©fini dans .env) au port 80 du conteneur (Nginx)
                healthcheck:
                  test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 10s
            EOF

            echo "Pulling the new image..."
            docker compose -f docker-compose.prod.yml pull

            echo "Stopping and restarting container..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate --remove-orphans

            echo "Cleaning up old Docker images..."
            docker image prune -af # -a pour supprimer toutes les images non utilis√©es

            echo "Logging out from ${{ env.REGISTRY }}..."
            docker logout ${{ env.REGISTRY }}

            echo "--- Deployment finished successfully ---"